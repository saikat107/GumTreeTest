package edu.virginia.cs.gumtreetest;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TriggerTests {

	private static Map<String, List<String>> triggerTests = new HashMap<>();
	
	public static boolean containsKey(String key) {
		return triggerTests.containsKey(key);
	}
	
	public static List<String> get(String key){
		return triggerTests.get(key);
	}
	
	static {
		triggerTests.put("Chart1", Arrays.asList(new String[] {"org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660", }));
		triggerTests.put("Chart2", Arrays.asList(new String[] {"org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_2", "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_3", }));
		triggerTests.put("Chart3", Arrays.asList(new String[] {"org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3", }));
		triggerTests.put("Chart4", Arrays.asList(new String[] {"org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange1", "org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange2", "org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange1", "org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange2", "org.jfree.chart.axis.junit.ValueAxisTests::testAxisMargins", "org.jfree.chart.junit.JFreeChartTests::testSerialization4", "org.jfree.chart.junit.ScatterPlotTests::testDrawWithNullInfo", "org.jfree.chart.junit.ScatterPlotTests::testSetSeriesToolTipGenerator", "org.jfree.chart.junit.ScatterPlotTests::testReplaceDataset", "org.jfree.chart.junit.TimeSeriesChartTests::testDrawWithNullInfo", "org.jfree.chart.junit.TimeSeriesChartTests::testSetSeriesToolTipGenerator", "org.jfree.chart.junit.TimeSeriesChartTests::testReplaceDataset", "org.jfree.chart.junit.XYAreaChartTests::testDrawWithNullInfo", "org.jfree.chart.junit.XYAreaChartTests::testSetSeriesToolTipGenerator", "org.jfree.chart.junit.XYAreaChartTests::testReplaceDataset", "org.jfree.chart.junit.XYStepAreaChartTests::testDrawWithNullInfo", "org.jfree.chart.junit.XYStepAreaChartTests::testSetSeriesToolTipGenerator", "org.jfree.chart.junit.XYStepAreaChartTests::testReplaceDataset", "org.jfree.chart.junit.XYStepChartTests::testDrawWithNullInfo", "org.jfree.chart.junit.XYStepChartTests::testSetSeriesToolTipGenerator", "org.jfree.chart.junit.XYStepChartTests::testReplaceDataset", "org.jfree.chart.plot.junit.XYPlotTests::testDrawRangeGridlines", }));
		triggerTests.put("Chart5", Arrays.asList(new String[] {"org.jfree.data.xy.junit.XYSeriesTests::testBug1955483", }));
		triggerTests.put("Chart6", Arrays.asList(new String[] {"org.jfree.chart.util.junit.ShapeListTests::testSerialization", "org.jfree.chart.util.junit.ShapeListTests::testEquals", }));
		triggerTests.put("Chart7", Arrays.asList(new String[] {"org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex", }));
		triggerTests.put("Chart8", Arrays.asList(new String[] {"org.jfree.data.time.junit.WeekTests::testConstructor", }));
		triggerTests.put("Chart9", Arrays.asList(new String[] {"org.jfree.data.time.junit.TimeSeriesTests::testBug1864222", }));
		triggerTests.put("Chart10", Arrays.asList(new String[] {"org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests::testGenerateURLFragment", }));
		triggerTests.put("Chart11", Arrays.asList(new String[] {"org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths", }));
		triggerTests.put("Chart12", Arrays.asList(new String[] {"org.jfree.chart.plot.junit.MultiplePiePlotTests::testConstructor", }));
		triggerTests.put("Chart13", Arrays.asList(new String[] {"org.jfree.chart.block.junit.BorderArrangementTests::testSizingWithWidthConstraint", }));
		triggerTests.put("Chart14", Arrays.asList(new String[] {"org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker", "org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker", "org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker", "org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker", }));
		triggerTests.put("Chart15", Arrays.asList(new String[] {"org.jfree.chart.plot.junit.PiePlot3DTests::testDrawWithNullDataset", }));
		triggerTests.put("Chart16", Arrays.asList(new String[] {"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetCategoryIndex", "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testSetCategoryKeys", "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetSeriesIndex", "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetRowCount", "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetRowIndex", "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetColumnCount", "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetColumnIndex", "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testCloning2", }));
		triggerTests.put("Chart17", Arrays.asList(new String[] {"org.jfree.data.time.junit.TimeSeriesTests::testBug1832432", }));
		triggerTests.put("Chart18", Arrays.asList(new String[] {"org.jfree.data.category.junit.DefaultCategoryDatasetTests::testBug1835955", "org.jfree.data.junit.DefaultKeyedValues2DTests::testRemoveColumnByKey", "org.jfree.data.junit.DefaultKeyedValuesTests::testRemoveValue", "org.jfree.data.junit.DefaultKeyedValuesTests::testGetIndex2", }));
		triggerTests.put("Chart19", Arrays.asList(new String[] {"org.jfree.chart.plot.junit.CategoryPlotTests::testGetRangeAxisIndex", "org.jfree.chart.plot.junit.CategoryPlotTests::testGetDomainAxisIndex", }));
		triggerTests.put("Chart20", Arrays.asList(new String[] {"org.jfree.chart.plot.junit.ValueMarkerTests::test1808376", }));
		triggerTests.put("Chart21", Arrays.asList(new String[] {"org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds", }));
		triggerTests.put("Chart22", Arrays.asList(new String[] {"org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey", "org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue", "org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey", "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex", "org.jfree.data.junit.KeyedObjects2DTests::testSetObject", "org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey", }));
		triggerTests.put("Chart23", Arrays.asList(new String[] {"org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testEquals", }));
		triggerTests.put("Chart24", Arrays.asList(new String[] {"org.jfree.chart.renderer.junit.GrayPaintScaleTests::testGetPaint", }));
		triggerTests.put("Chart25", Arrays.asList(new String[] {"org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical", "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationVertical", "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal", "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal", }));
		triggerTests.put("Chart26", Arrays.asList(new String[] {"org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo", "org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo", "org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo", "org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo", "org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2", "org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo", "org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo", "org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo", "org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo", "org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo", "org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo", "org.jfree.chart.plot.junit.CategoryPlotTests::test1654215", "org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3", "org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4", "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo", "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo", "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo", "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo", "org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo", "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo", "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo", "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo", }));
		triggerTests.put("Closure1", Arrays.asList(new String[] {"com.google.javascript.jscomp.CommandLineRunnerTest::testSimpleModeLeavesUnusedParams", "com.google.javascript.jscomp.CommandLineRunnerTest::testForwardDeclareDroppedTypes", "com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag1", "com.google.javascript.jscomp.IntegrationTest::testIssue787", "com.google.javascript.jscomp.RemoveUnusedVarsTest::testRemoveGlobal1", "com.google.javascript.jscomp.RemoveUnusedVarsTest::testRemoveGlobal2", "com.google.javascript.jscomp.RemoveUnusedVarsTest::testRemoveGlobal3", "com.google.javascript.jscomp.RemoveUnusedVarsTest::testIssue168b", }));
		triggerTests.put("Closure2", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testBadInterfaceExtendsNonExistentInterfaces", }));
		triggerTests.put("Closure3", Arrays.asList(new String[] {"com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression1a", "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression1", "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression3", }));
		triggerTests.put("Closure4", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testImplementsExtendsLoop", "com.google.javascript.jscomp.TypeCheckTest::testImplementsLoop", "com.google.javascript.jscomp.TypeCheckTest::testConversionFromInterfaceToRecursiveConstructor", }));
		triggerTests.put("Closure5", Arrays.asList(new String[] {"com.google.javascript.jscomp.InlineObjectLiteralsTest::testNoInlineDeletedProperties", }));
		triggerTests.put("Closure6", Arrays.asList(new String[] {"com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition", "com.google.javascript.jscomp.TypeCheckTest::testIssue635b", "com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition", }));
		triggerTests.put("Closure7", Arrays.asList(new String[] {"com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest::testGoogIsFunction2", "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest::testTypeof3", }));
		triggerTests.put("Closure8", Arrays.asList(new String[] {"com.google.javascript.jscomp.CollapseVariableDeclarationsTest::testIssue820", }));
		triggerTests.put("Closure9", Arrays.asList(new String[] {"com.google.javascript.jscomp.ProcessCommonJSModulesTest::testGuessModuleName", }));
		triggerTests.put("Closure10", Arrays.asList(new String[] {"com.google.javascript.jscomp.PeepholeFoldConstantsTest::testIssue821", }));
		triggerTests.put("Closure11", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testGetprop4", "com.google.javascript.jscomp.TypeCheckTest::testIssue810", }));
		triggerTests.put("Closure12", Arrays.asList(new String[] {"com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testIssue794b", }));
		triggerTests.put("Closure13", Arrays.asList(new String[] {"com.google.javascript.jscomp.IntegrationTest::testIssue787", }));
		triggerTests.put("Closure14", Arrays.asList(new String[] {"com.google.javascript.jscomp.CheckMissingReturnTest::testIssue779", "com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedFinally", "com.google.javascript.jscomp.ControlFlowAnalysisTest::testDeepNestedBreakwithFinally", }));
		triggerTests.put("Closure15", Arrays.asList(new String[] {"com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testSimpleForIn", }));
		triggerTests.put("Closure16", Arrays.asList(new String[] {"com.google.javascript.jscomp.IntegrationTest::testIssue772", "com.google.javascript.jscomp.ScopedAliasesTest::testIssue772", }));
		triggerTests.put("Closure17", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testIssue688", }));
		triggerTests.put("Closure18", Arrays.asList(new String[] {"com.google.javascript.jscomp.IntegrationTest::testDependencySorting", }));
		triggerTests.put("Closure19", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeInferenceTest::testNoThisInference", }));
		triggerTests.put("Closure20", Arrays.asList(new String[] {"com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest::testSimpleFunctionCall", }));
		triggerTests.put("Closure21", Arrays.asList(new String[] {"com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode", }));
		triggerTests.put("Closure22", Arrays.asList(new String[] {"com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode", }));
		triggerTests.put("Closure23", Arrays.asList(new String[] {"com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem", }));
		triggerTests.put("Closure24", Arrays.asList(new String[] {"com.google.javascript.jscomp.ScopedAliasesTest::testNonAliasLocal", }));
		triggerTests.put("Closure25", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew", }));
		triggerTests.put("Closure26", Arrays.asList(new String[] {"com.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS", "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS", "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports", "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName", "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash", "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming", "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports", }));
		triggerTests.put("Closure27", Arrays.asList(new String[] {"com.google.javascript.rhino.IRTest::testIssue727_1", "com.google.javascript.rhino.IRTest::testIssue727_2", "com.google.javascript.rhino.IRTest::testIssue727_3", }));
		triggerTests.put("Closure28", Arrays.asList(new String[] {"com.google.javascript.jscomp.InlineCostEstimatorTest::testCost", "com.google.javascript.jscomp.InlineFunctionsTest::testIssue728", }));
		triggerTests.put("Closure29", Arrays.asList(new String[] {"com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject10", "com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject12", "com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject22", "com.google.javascript.jscomp.InlineObjectLiteralsTest::testIssue724", "com.google.javascript.jscomp.IntegrationTest::testIssue724", }));
		triggerTests.put("Closure30", Arrays.asList(new String[] {"com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testInlineAcrossSideEffect1", "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testCanInlineAcrossNoSideEffect", "com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testIssue698", }));
		triggerTests.put("Closure31", Arrays.asList(new String[] {"com.google.javascript.jscomp.CommandLineRunnerTest::testDependencySortingWhitespaceMode", }));
		triggerTests.put("Closure32", Arrays.asList(new String[] {"com.google.javascript.jscomp.IntegrationTest::testIssue701", "com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicense", "com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParsePreserve", "com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii", }));
		triggerTests.put("Closure33", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testIssue700", }));
		triggerTests.put("Closure34", Arrays.asList(new String[] {"com.google.javascript.jscomp.CodePrinterTest::testManyAdds", }));
		triggerTests.put("Closure35", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testIssue669", }));
		triggerTests.put("Closure36", Arrays.asList(new String[] {"com.google.javascript.jscomp.IntegrationTest::testSingletonGetter1", }));
		triggerTests.put("Closure37", Arrays.asList(new String[] {"com.google.javascript.jscomp.IntegrationTest::testIncompleteFunction", }));
		triggerTests.put("Closure38", Arrays.asList(new String[] {"com.google.javascript.jscomp.CodePrinterTest::testMinusNegativeZero", }));
		triggerTests.put("Closure39", Arrays.asList(new String[] {"com.google.javascript.rhino.jstype.RecordTypeTest::testRecursiveRecord", "com.google.javascript.rhino.jstype.RecordTypeTest::testLongToString", }));
		triggerTests.put("Closure40", Arrays.asList(new String[] {"com.google.javascript.jscomp.IntegrationTest::testIssue284", "com.google.javascript.jscomp.NameAnalyzerTest::testIssue284", }));
		triggerTests.put("Closure41", Arrays.asList(new String[] {"com.google.javascript.jscomp.LooseTypeCheckTest::testMethodInference6", "com.google.javascript.jscomp.TypeCheckTest::testIssue368", "com.google.javascript.jscomp.TypeCheckTest::testMethodInference6", }));
		triggerTests.put("Closure42", Arrays.asList(new String[] {"com.google.javascript.jscomp.parsing.ParserTest::testForEach", }));
		triggerTests.put("Closure43", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testLends10", "com.google.javascript.jscomp.TypeCheckTest::testLends11", }));
		triggerTests.put("Closure44", Arrays.asList(new String[] {"com.google.javascript.jscomp.CodePrinterTest::testIssue620", }));
		triggerTests.put("Closure45", Arrays.asList(new String[] {"com.google.javascript.jscomp.RemoveUnusedVarsTest::testIssue618_1", }));
		triggerTests.put("Closure46", Arrays.asList(new String[] {"com.google.javascript.rhino.jstype.JSTypeTest::testRecordTypeLeastSuperType2", "com.google.javascript.rhino.jstype.JSTypeTest::testRecordTypeLeastSuperType3", "com.google.javascript.rhino.jstype.RecordTypeTest::testSupAndInf", }));
		triggerTests.put("Closure47", Arrays.asList(new String[] {"com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testParseSourceMetaMap", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput0a", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultiFunctionMapping", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappingsGoldenOutput", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping2", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMappingGoldenOutput", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testSourceMapMerging", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappings", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping1", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping2", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput2", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput3", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput4", "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5", }));
		triggerTests.put("Closure48", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testIssue586", }));
				triggerTests.put("Closure49", Arrays.asList(new String[] {"com.google.javascript.jscomp.FunctionInjectorTest::testInline19b", "com.google.javascript.jscomp.FunctionInjectorTest::testInlineIntoLoop", "com.google.javascript.jscomp.FunctionInjectorTest::testInline13", "com.google.javascript.jscomp.FunctionInjectorTest::testInline14", "com.google.javascript.jscomp.FunctionInjectorTest::testInline15", "com.google.javascript.jscomp.FunctionInjectorTest::testInline16", "com.google.javascript.jscomp.FunctionInjectorTest::testInline17", "com.google.javascript.jscomp.FunctionInjectorTest::testInline18", "com.google.javascript.jscomp.FunctionInjectorTest::testInline19", "com.google.javascript.jscomp.FunctionInjectorTest::testBug1897706", "com.google.javascript.jscomp.FunctionInjectorTest::testInlineFunctionWithInnerFunction5", "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateWithParameters3", "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateCallInLoopVars1", "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars1", "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars2", "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateFunctionDefinition", "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutate8", "com.google.javascript.jscomp.InlineFunctionsTest::testLoopWithFunctionWithFunction", "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables16", "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables18", "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining11", "com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting3", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverMutateConstants", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineWithThis7", "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous1", "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous3", "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables1", "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables3", "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables6", "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables7", "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionCallInlining11b", "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineNoResultNoParamCall3", "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining9", "com.google.javascript.jscomp.InlineFunctionsTest::testMethodWithFunctionWithFunction", "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionYCombinator", "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineVars7", "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2a", "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInline7", "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionOmega", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15b", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15d", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions16a", "com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818", "com.google.javascript.jscomp.InlineFunctionsTest::testComplexSample", "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified1", "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified2", "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified3", "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified4", "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified5", "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified6", "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified7", "com.google.javascript.jscomp.InlineFunctionsTest::testIssue423", "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2", "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition3", "com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeFunctionExpressionInCall", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverOverrideNewValues", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs1", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs2", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs3", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs4", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions10", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions13", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions22", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions23", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions9", "com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testMakeLocalNamesUniqueWithContext5", }));
				triggerTests.put("Closure50", Arrays.asList(new String[] {"com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd", "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testNoStringJoin", }));
				triggerTests.put("Closure51", Arrays.asList(new String[] {"com.google.javascript.jscomp.CodePrinterTest::testIssue582", }));
				triggerTests.put("Closure52", Arrays.asList(new String[] {"com.google.javascript.jscomp.CodePrinterTest::testNumericKeys", }));
				triggerTests.put("Closure53", Arrays.asList(new String[] {"com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545", }));
				triggerTests.put("Closure54", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testIssue537a", "com.google.javascript.jscomp.TypeCheckTest::testIssue537b", "com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2", }));
				triggerTests.put("Closure55", Arrays.asList(new String[] {"com.google.javascript.jscomp.FunctionRewriterTest::testIssue538", }));
				triggerTests.put("Closure56", Arrays.asList(new String[] {"com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest::testExceptNoNewLine", "com.google.javascript.jscomp.JsMessageExtractorTest::testSyntaxError1", "com.google.javascript.jscomp.JsMessageExtractorTest::testSyntaxError2", }));
				triggerTests.put("Closure57", Arrays.asList(new String[] {"com.google.javascript.jscomp.ClosureCodingConventionTest::testRequire", }));
				triggerTests.put("Closure58", Arrays.asList(new String[] {"com.google.javascript.jscomp.LiveVariableAnalysisTest::testExpressionInForIn", }));
				triggerTests.put("Closure59", Arrays.asList(new String[] {"com.google.javascript.jscomp.CommandLineRunnerTest::testCheckGlobalThisOff", }));
				triggerTests.put("Closure60", Arrays.asList(new String[] {"com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504", "com.google.javascript.jscomp.NodeUtilTest::testGetBooleanValue", }));
				triggerTests.put("Closure61", Arrays.asList(new String[] {"com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest::testCall1", "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest::testCall2", "com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest::testRemoveUselessOps", }));
				triggerTests.put("Closure62", Arrays.asList(new String[] {"com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1", "com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine2", }));
				triggerTests.put("Closure63", Arrays.asList(new String[] {"com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1", "com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine2", }));
				triggerTests.put("Closure64", Arrays.asList(new String[] {"com.google.javascript.jscomp.CommandLineRunnerTest::testES5StrictUseStrictMultipleInputs", }));
				triggerTests.put("Closure65", Arrays.asList(new String[] {"com.google.javascript.jscomp.CodePrinterTest::testZero", }));
				triggerTests.put("Closure66", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testGetTypedPercent5", "com.google.javascript.jscomp.TypeCheckTest::testGetTypedPercent6", }));
				triggerTests.put("Closure67", Arrays.asList(new String[] {"com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing7", }));
				triggerTests.put("Closure68", Arrays.asList(new String[] {"com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testIssue477", }));
				triggerTests.put("Closure69", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testThisTypeOfFunction2", "com.google.javascript.jscomp.TypeCheckTest::testThisTypeOfFunction3", "com.google.javascript.jscomp.TypeCheckTest::testThisTypeOfFunction4", }));
				triggerTests.put("Closure70", Arrays.asList(new String[] {"com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl", "com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13", "com.google.javascript.jscomp.TypeCheckTest::testScoping12", "com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl", "com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13", }));
				triggerTests.put("Closure71", Arrays.asList(new String[] {"com.google.javascript.jscomp.CheckAccessControlsTest::testNoPrivateAccessForProperties6", "com.google.javascript.jscomp.CheckAccessControlsTest::testNoPrivateAccessForProperties8", }));
				triggerTests.put("Closure72", Arrays.asList(new String[] {"com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions31", }));
				triggerTests.put("Closure73", Arrays.asList(new String[] {"com.google.javascript.jscomp.CodePrinterTest::testUnicode", }));
				triggerTests.put("Closure74", Arrays.asList(new String[] {"com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3", "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators", "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testCommutativeOperators", }));
				triggerTests.put("Closure75", Arrays.asList(new String[] {"com.google.javascript.jscomp.PeepholeFoldConstantsTest::testIEString", }));
				triggerTests.put("Closure76", Arrays.asList(new String[] {"com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2", "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b", "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c", "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d", }));
				triggerTests.put("Closure77", Arrays.asList(new String[] {"com.google.javascript.jscomp.CodePrinterTest::testZero", }));
				triggerTests.put("Closure78", Arrays.asList(new String[] {"com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldArithmetic", }));
				triggerTests.put("Closure79", Arrays.asList(new String[] {"com.google.javascript.jscomp.NormalizeTest::testIssue", "com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns1", "com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3", "com.google.javascript.jscomp.VarCheckTest::testVarReferenceInExterns", "com.google.javascript.jscomp.VarCheckTest::testCallInExterns", }));
				triggerTests.put("Closure80", Arrays.asList(new String[] {"com.google.javascript.jscomp.NodeUtilTest::testIsBooleanResult", "com.google.javascript.jscomp.NodeUtilTest::testLocalValue1", }));
				triggerTests.put("Closure81", Arrays.asList(new String[] {"com.google.javascript.jscomp.parsing.ParserTest::testUnnamedFunctionStatement", }));
				triggerTests.put("Closure82", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testIssue301", "com.google.javascript.rhino.jstype.FunctionTypeTest::testEmptyFunctionTypes", }));
				triggerTests.put("Closure83", Arrays.asList(new String[] {"com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2", }));
				triggerTests.put("Closure84", Arrays.asList(new String[] {"com.google.javascript.jscomp.parsing.ParserTest::testDestructuringAssignForbidden4", }));
				triggerTests.put("Closure85", Arrays.asList(new String[] {"com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps", "com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311", }));
				triggerTests.put("Closure86", Arrays.asList(new String[] {"com.google.javascript.jscomp.NodeUtilTest::testLocalValue1", "com.google.javascript.jscomp.PureFunctionIdentifierTest::testLocalizedSideEffects8", "com.google.javascript.jscomp.PureFunctionIdentifierTest::testLocalizedSideEffects9", "com.google.javascript.jscomp.PureFunctionIdentifierTest::testAnnotationInExterns_new4", "com.google.javascript.jscomp.PureFunctionIdentifierTest::testAnnotationInExterns_new6", "com.google.javascript.jscomp.PureFunctionIdentifierTest::testIssue303b", "com.google.javascript.jscomp.PureFunctionIdentifierTest::testIssue303", }));
				triggerTests.put("Closure87", Arrays.asList(new String[] {"com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest::testIssue291", }));
				triggerTests.put("Closure88", Arrays.asList(new String[] {"com.google.javascript.jscomp.CommandLineRunnerTest::testIssue297", "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297a", "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297b", "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297c", "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297d", "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297e", "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297f", }));
				triggerTests.put("Closure89", Arrays.asList(new String[] {"com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToChildOfUncollapsibleFunctionInLocalScope", "com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth1_1", "com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth1_2", "com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth1_3", "com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1", "com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1", "com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2", "com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth2", }));
				triggerTests.put("Closure90", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testBackwardsTypedefUse8", "com.google.javascript.jscomp.TypeCheckTest::testBackwardsTypedefUse9", }));
				triggerTests.put("Closure91", Arrays.asList(new String[] {"com.google.javascript.jscomp.CheckGlobalThisTest::testLendsAnnotation3", }));
				triggerTests.put("Closure92", Arrays.asList(new String[] {"com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4", }));
				triggerTests.put("Closure93", Arrays.asList(new String[] {"com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4", }));
				triggerTests.put("Closure94", Arrays.asList(new String[] {"com.google.javascript.jscomp.NodeUtilTest::testValidDefine", "com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString1", "com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString3", }));
				triggerTests.put("Closure95", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testQualifiedNameInference5", "com.google.javascript.jscomp.TypedScopeCreatorTest::testGlobalQualifiedNameInLocalScope", }));
				triggerTests.put("Closure96", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments16", }));
				triggerTests.put("Closure97", Arrays.asList(new String[] {"com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldBitShifts", }));
				triggerTests.put("Closure98", Arrays.asList(new String[] {"com.google.javascript.jscomp.InlineVariablesTest::testNoInlineAliasesInLoop", }));
				triggerTests.put("Closure99", Arrays.asList(new String[] {"com.google.javascript.jscomp.CheckGlobalThisTest::testPropertyOfMethod", "com.google.javascript.jscomp.CheckGlobalThisTest::testMethod4", "com.google.javascript.jscomp.CheckGlobalThisTest::testInterface1", }));
				triggerTests.put("Closure100", Arrays.asList(new String[] {"com.google.javascript.jscomp.CheckGlobalThisTest::testStaticFunction6", "com.google.javascript.jscomp.CheckGlobalThisTest::testStaticFunction7", "com.google.javascript.jscomp.CheckGlobalThisTest::testStaticFunction8", "com.google.javascript.jscomp.CheckGlobalThisTest::testGlobalThis7", "com.google.javascript.jscomp.CheckGlobalThisTest::testStaticMethod2", "com.google.javascript.jscomp.CheckGlobalThisTest::testStaticMethod3", "com.google.javascript.jscomp.CheckGlobalThisTest::testInnerFunction1", "com.google.javascript.jscomp.CheckGlobalThisTest::testInnerFunction2", "com.google.javascript.jscomp.CheckGlobalThisTest::testInnerFunction3", }));
				triggerTests.put("Closure101", Arrays.asList(new String[] {"com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives", }));
				triggerTests.put("Closure102", Arrays.asList(new String[] {"com.google.javascript.jscomp.CompilerRunnerTest::testIssue115", }));
				triggerTests.put("Closure103", Arrays.asList(new String[] {"com.google.javascript.jscomp.CheckUnreachableCodeTest::testInstanceOfThrowsException", "com.google.javascript.jscomp.ControlFlowAnalysisTest::testInstanceOf", "com.google.javascript.jscomp.DisambiguatePropertiesTest::testSupertypeReferenceOfSubtypeProperty", }));
				triggerTests.put("Closure104", Arrays.asList(new String[] {"com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5", }));
				triggerTests.put("Closure105", Arrays.asList(new String[] {"com.google.javascript.jscomp.FoldConstantsTest::testStringJoinAdd", }));
				triggerTests.put("Closure106", Arrays.asList(new String[] {"com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments", "com.google.javascript.jscomp.CollapsePropertiesTest::testTwinReferenceCancelsChildCollapsing", "com.google.javascript.jscomp.CollapsePropertiesTest::testCrashInNestedAssign", "com.google.javascript.jscomp.CollapsePropertiesTest::testCrashInCommaOperator", }));
				triggerTests.put("Closure107", Arrays.asList(new String[] {"com.google.javascript.jscomp.CommandLineRunnerTest::testGetMsgWiringNoWarnings", }));
				triggerTests.put("Closure108", Arrays.asList(new String[] {"com.google.javascript.jscomp.ScopedAliasesTest::testIssue1144", }));
				triggerTests.put("Closure109", Arrays.asList(new String[] {"com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testStructuralConstructor2", "com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testStructuralConstructor3", }));
				triggerTests.put("Closure110", Arrays.asList(new String[] {"com.google.javascript.jscomp.ScopedAliasesTest::testHoistedFunctionDeclaration", "com.google.javascript.jscomp.ScopedAliasesTest::testFunctionDeclaration", }));
				triggerTests.put("Closure111", Arrays.asList(new String[] {"com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest::testGoogIsArray2", }));
				triggerTests.put("Closure112", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testIssue1058", "com.google.javascript.jscomp.TypeCheckTest::testTemplatized11", }));
				triggerTests.put("Closure113", Arrays.asList(new String[] {"com.google.javascript.jscomp.VarCheckTest::testNoUndeclaredVarWhenUsingClosurePass", }));
				triggerTests.put("Closure114", Arrays.asList(new String[] {"com.google.javascript.jscomp.NameAnalyzerTest::testAssignWithCall", }));
				triggerTests.put("Closure115", Arrays.asList(new String[] {"com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818", "com.google.javascript.jscomp.InlineFunctionsTest::testDoubleInlining1", "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8", "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified9", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions22", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions23", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions6", }));
				triggerTests.put("Closure116", Arrays.asList(new String[] {"com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101a", "com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101b", "com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818", "com.google.javascript.jscomp.InlineFunctionsTest::testDoubleInlining2", "com.google.javascript.jscomp.InlineFunctionsTest::testIssue1101", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineIfParametersModified8", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineIfParametersModified9", "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions6", }));
				triggerTests.put("Closure117", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testIssue1047", }));
				triggerTests.put("Closure118", Arrays.asList(new String[] {"com.google.javascript.jscomp.DisambiguatePropertiesTest::testOneType4", "com.google.javascript.jscomp.DisambiguatePropertiesTest::testTwoTypes4", }));
				triggerTests.put("Closure119", Arrays.asList(new String[] {"com.google.javascript.jscomp.CheckGlobalNamesTest::testGlobalCatch", }));
				triggerTests.put("Closure120", Arrays.asList(new String[] {"com.google.javascript.jscomp.InlineVariablesTest::testExternalIssue1053", }));
				triggerTests.put("Closure121", Arrays.asList(new String[] {"com.google.javascript.jscomp.InlineVariablesTest::testExternalIssue1053", }));
				triggerTests.put("Closure122", Arrays.asList(new String[] {"com.google.javascript.jscomp.parsing.ParserTest::testSuspiciousBlockCommentWarning3", "com.google.javascript.jscomp.parsing.ParserTest::testSuspiciousBlockCommentWarning4", "com.google.javascript.jscomp.parsing.ParserTest::testSuspiciousBlockCommentWarning5", }));
				triggerTests.put("Closure123", Arrays.asList(new String[] {"com.google.javascript.jscomp.CodePrinterTest::testPrintInOperatorInForLoop", }));
				triggerTests.put("Closure124", Arrays.asList(new String[] {"com.google.javascript.jscomp.ExploitAssignsTest::testIssue1017", }));
				triggerTests.put("Closure125", Arrays.asList(new String[] {"com.google.javascript.jscomp.TypeCheckTest::testIssue1002", }));
				triggerTests.put("Closure126", Arrays.asList(new String[] {"com.google.javascript.jscomp.MinimizeExitPointsTest::testDontRemoveBreakInTryFinally", "com.google.javascript.jscomp.MinimizeExitPointsTest::testFunctionReturnOptimization", }));
				triggerTests.put("Closure127", Arrays.asList(new String[] {"com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue4177428_return", "com.google.javascript.jscomp.UnreachableCodeEliminationTest::testDontRemoveBreakInTryFinally", "com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue4177428_continue", "com.google.javascript.jscomp.UnreachableCodeEliminationTest::testDontRemoveBreakInTryFinallySwitch", "com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue4177428a", "com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue4177428c", }));
				triggerTests.put("Closure128", Arrays.asList(new String[] {"com.google.javascript.jscomp.CodePrinterTest::testIssue942", }));
				triggerTests.put("Closure129", Arrays.asList(new String[] {"com.google.javascript.jscomp.IntegrationTest::testIssue937", }));
				triggerTests.put("Closure130", Arrays.asList(new String[] {"com.google.javascript.jscomp.CollapsePropertiesTest::testIssue931", }));
				triggerTests.put("Closure131", Arrays.asList(new String[] {"com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps", "com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert", }));
				triggerTests.put("Closure132", Arrays.asList(new String[] {"com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest::testIssue925", }));
				triggerTests.put("Closure133", Arrays.asList(new String[] {"com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testTextExtents", }));
				triggerTests.put("Math1", Arrays.asList(new String[] {"org.apache.commons.math3.fraction.BigFractionTest::testDigitLimitConstructor", "org.apache.commons.math3.fraction.FractionTest::testDigitLimitConstructor", }));
				triggerTests.put("Math2", Arrays.asList(new String[] {"org.apache.commons.math3.distribution.HypergeometricDistributionTest::testMath1021", }));
				triggerTests.put("Math3", Arrays.asList(new String[] {"org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray", }));
				triggerTests.put("Math4", Arrays.asList(new String[] {"org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting", "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel", }));
				triggerTests.put("Math5", Arrays.asList(new String[] {"org.apache.commons.math3.complex.ComplexTest::testReciprocalZero", }));
				triggerTests.put("Math6", Arrays.asList(new String[] {"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2", "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations", "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations", }));
				triggerTests.put("Math7", Arrays.asList(new String[] {"org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest::testEventsScheduling", }));
				triggerTests.put("Math8", Arrays.asList(new String[] {"org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942", }));
				triggerTests.put("Math9", Arrays.asList(new String[] {"org.apache.commons.math3.geometry.euclidean.threed.LineTest::testRevert", }));
				triggerTests.put("Math10", Arrays.asList(new String[] {"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest::testAtan2SpecialCases", }));
				triggerTests.put("Math11", Arrays.asList(new String[] {"org.apache.commons.math3.distribution.MultivariateNormalDistributionTest::testUnivariateDistribution", }));
				triggerTests.put("Math12", Arrays.asList(new String[] {"org.apache.commons.math3.distribution.GammaDistributionTest::testDistributionClone", "org.apache.commons.math3.distribution.LogNormalDistributionTest::testDistributionClone", "org.apache.commons.math3.distribution.NormalDistributionTest::testDistributionClone", }));
				triggerTests.put("Math13", Arrays.asList(new String[] {"org.apache.commons.math3.optimization.fitting.PolynomialFitterTest::testLargeSample", }));
				triggerTests.put("Math14", Arrays.asList(new String[] {"org.apache.commons.math3.fitting.PolynomialFitterTest::testLargeSample", }));
				triggerTests.put("Math15", Arrays.asList(new String[] {"org.apache.commons.math3.util.FastMathTest::testMath904", }));
				triggerTests.put("Math16", Arrays.asList(new String[] {"org.apache.commons.math3.util.FastMathTest::testMath905LargePositive", "org.apache.commons.math3.util.FastMathTest::testMath905LargeNegative", }));
				triggerTests.put("Math17", Arrays.asList(new String[] {"org.apache.commons.math3.dfp.DfpTest::testMultiply", }));
				triggerTests.put("Math18", Arrays.asList(new String[] {"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testFitAccuracyDependsOnBoundary", }));
				triggerTests.put("Math19", Arrays.asList(new String[] {"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testBoundaryRangeTooLarge", }));
				triggerTests.put("Math20", Arrays.asList(new String[] {"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testMath864", }));
				triggerTests.put("Math21", Arrays.asList(new String[] {"org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789", "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank", }));
				triggerTests.put("Math22", Arrays.asList(new String[] {"org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive", "org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive", }));
				triggerTests.put("Math23", Arrays.asList(new String[] {"org.apache.commons.math3.optimization.univariate.BrentOptimizerTest::testKeepInitIfBest", }));
				triggerTests.put("Math24", Arrays.asList(new String[] {"org.apache.commons.math3.optimization.univariate.BrentOptimizerTest::testMath855", }));
				triggerTests.put("Math25", Arrays.asList(new String[] {"org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844", }));
				triggerTests.put("Math26", Arrays.asList(new String[] {"org.apache.commons.math3.fraction.FractionTest::testIntegerOverflow", }));
				triggerTests.put("Math27", Arrays.asList(new String[] {"org.apache.commons.math3.fraction.FractionTest::testMath835", }));
				triggerTests.put("Math28", Arrays.asList(new String[] {"org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle", }));
				triggerTests.put("Math29", Arrays.asList(new String[] {"org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes", "org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes", "org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType", }));
				triggerTests.put("Math30", Arrays.asList(new String[] {"org.apache.commons.math3.stat.inference.MannWhitneyUTestTest::testBigDataSet", }));
				triggerTests.put("Math31", Arrays.asList(new String[] {"org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718", "org.apache.commons.math3.distribution.FDistributionTest::testMath785", }));
				triggerTests.put("Math32", Arrays.asList(new String[] {"org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest::testIssue780", }));
				triggerTests.put("Math33", Arrays.asList(new String[] {"org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781", }));
				triggerTests.put("Math34", Arrays.asList(new String[] {"org.apache.commons.math3.genetics.ListPopulationTest::testIterator", }));
				triggerTests.put("Math35", Arrays.asList(new String[] {"org.apache.commons.math3.genetics.ElitisticListPopulationTest::testChromosomeListConstructorTooLow", "org.apache.commons.math3.genetics.ElitisticListPopulationTest::testConstructorTooHigh", "org.apache.commons.math3.genetics.ElitisticListPopulationTest::testConstructorTooLow", "org.apache.commons.math3.genetics.ElitisticListPopulationTest::testChromosomeListConstructorTooHigh", }));
				triggerTests.put("Math36", Arrays.asList(new String[] {"org.apache.commons.math.fraction.BigFractionTest::testFloatValueForLargeNumeratorAndDenominator", "org.apache.commons.math.fraction.BigFractionTest::testDoubleValueForLargeNumeratorAndDenominator", }));
				triggerTests.put("Math37", Arrays.asList(new String[] {"org.apache.commons.math.complex.ComplexTest::testTanhInf", "org.apache.commons.math.complex.ComplexTest::testTan", "org.apache.commons.math.complex.ComplexTest::testTanh", "org.apache.commons.math.complex.ComplexTest::testTanInf", }));
				triggerTests.put("Math38", Arrays.asList(new String[] {"org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest::testConstrainedRosenWithMoreInterpolationPoints", }));
				triggerTests.put("Math39", Arrays.asList(new String[] {"org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest::testTooLargeFirstStep", }));
				triggerTests.put("Math40", Arrays.asList(new String[] {"org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest::testIssue716", }));
				triggerTests.put("Math41", Arrays.asList(new String[] {"org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted", }));
				triggerTests.put("Math42", Arrays.asList(new String[] {"org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath713NegativeVariable", }));
				triggerTests.put("Math43", Arrays.asList(new String[] {"org.apache.commons.math.stat.descriptive.SummaryStatisticsTest::testOverrideMeanWithMathClass", "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest::testOverrideGeoMeanWithMathClass", "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest::testOverrideVarianceWithMathClass", "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest::testOverrideMeanWithMathClass", "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest::testOverrideGeoMeanWithMathClass", "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest::testOverrideVarianceWithMathClass", }));
				triggerTests.put("Math44", Arrays.asList(new String[] {"org.apache.commons.math.ode.events.EventStateTest::testIssue695", }));
				triggerTests.put("Math45", Arrays.asList(new String[] {"org.apache.commons.math.linear.OpenMapRealMatrixTest::testMath679", }));
				triggerTests.put("Math46", Arrays.asList(new String[] {"org.apache.commons.math.complex.ComplexTest::testAtanI", "org.apache.commons.math.complex.ComplexTest::testDivideZero", }));
				triggerTests.put("Math47", Arrays.asList(new String[] {"org.apache.commons.math.complex.ComplexTest::testAtanI", "org.apache.commons.math.complex.ComplexTest::testDivideZero", }));
				triggerTests.put("Math48", Arrays.asList(new String[] {"org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest::testIssue631", }));
				triggerTests.put("Math49", Arrays.asList(new String[] {"org.apache.commons.math.linear.SparseRealVectorTest::testConcurrentModification", }));
				triggerTests.put("Math50", Arrays.asList(new String[] {"org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest::testIssue631", }));
				triggerTests.put("Math51", Arrays.asList(new String[] {"org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest::testIssue631", }));
				triggerTests.put("Math52", Arrays.asList(new String[] {"org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639", }));
				triggerTests.put("Math53", Arrays.asList(new String[] {"org.apache.commons.math.complex.ComplexTest::testAddNaN", }));
				triggerTests.put("Math54", Arrays.asList(new String[] {"org.apache.commons.math.dfp.DfpTest::testIssue567", }));
				triggerTests.put("Math55", Arrays.asList(new String[] {"org.apache.commons.math.geometry.Vector3DTest::testCrossProductCancellation", }));
				triggerTests.put("Math56", Arrays.asList(new String[] {"org.apache.commons.math.util.MultidimensionalCounterTest::testIterationConsistency", }));
				triggerTests.put("Math57", Arrays.asList(new String[] {"org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances", }));
				triggerTests.put("Math58", Arrays.asList(new String[] {"org.apache.commons.math.optimization.fitting.GaussianFitterTest::testMath519", }));
				triggerTests.put("Math59", Arrays.asList(new String[] {"org.apache.commons.math.util.FastMathTest::testMinMaxFloat", }));
				triggerTests.put("Math60", Arrays.asList(new String[] {"org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues", }));
				triggerTests.put("Math61", Arrays.asList(new String[] {"org.apache.commons.math.distribution.PoissonDistributionTest::testMean", }));
				triggerTests.put("Math62", Arrays.asList(new String[] {"org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest::testQuinticMin", }));
				triggerTests.put("Math63", Arrays.asList(new String[] {"org.apache.commons.math.util.MathUtilsTest::testArrayEquals", }));
				triggerTests.put("Math64", Arrays.asList(new String[] {"org.apache.commons.math.optimization.general.MinpackTest::testMinpackJennrichSampson", "org.apache.commons.math.optimization.general.MinpackTest::testMinpackFreudensteinRoth", }));
				triggerTests.put("Math65", Arrays.asList(new String[] {"org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testCircleFitting", }));
				triggerTests.put("Math66", Arrays.asList(new String[] {"org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin", "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testSinMin", "org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testQuinticMinStatistics", "org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testSinMin", }));
				triggerTests.put("Math67", Arrays.asList(new String[] {"org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin", }));
				triggerTests.put("Math68", Arrays.asList(new String[] {"org.apache.commons.math.optimization.general.MinpackTest::testMinpackJennrichSampson", "org.apache.commons.math.optimization.general.MinpackTest::testMinpackFreudensteinRoth", }));
				triggerTests.put("Math69", Arrays.asList(new String[] {"org.apache.commons.math.stat.correlation.PearsonsCorrelationTest::testPValueNearZero", "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest::testPValueNearZero", }));
				triggerTests.put("Math70", Arrays.asList(new String[] {"org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369", }));
				triggerTests.put("Math71", Arrays.asList(new String[] {"org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest::testMissedEndEvent", "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest::testMissedEndEvent", }));
				triggerTests.put("Math72", Arrays.asList(new String[] {"org.apache.commons.math.analysis.solvers.BrentSolverTest::testRootEndpoints", }));
				triggerTests.put("Math73", Arrays.asList(new String[] {"org.apache.commons.math.analysis.solvers.BrentSolverTest::testBadEndpoints", }));
				triggerTests.put("Math74", Arrays.asList(new String[] {"org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest::polynomial", }));
				triggerTests.put("Math75", Arrays.asList(new String[] {"org.apache.commons.math.stat.FrequencyTest::testPcts", }));
				triggerTests.put("Math76", Arrays.asList(new String[] {"org.apache.commons.math.linear.SingularValueSolverTest::testMath320A", "org.apache.commons.math.linear.SingularValueSolverTest::testMath320B", }));
				triggerTests.put("Math77", Arrays.asList(new String[] {"org.apache.commons.math.linear.ArrayRealVectorTest::testBasicFunctions", "org.apache.commons.math.linear.SparseRealVectorTest::testBasicFunctions", }));
				triggerTests.put("Math78", Arrays.asList(new String[] {"org.apache.commons.math.ode.events.EventStateTest::closeEvents", }));
				triggerTests.put("Math79", Arrays.asList(new String[] {"org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate", }));
				triggerTests.put("Math80", Arrays.asList(new String[] {"org.apache.commons.math.linear.EigenDecompositionImplTest::testMathpbx02", }));
				triggerTests.put("Math81", Arrays.asList(new String[] {"org.apache.commons.math.linear.EigenDecompositionImplTest::testMath308", }));
				triggerTests.put("Math82", Arrays.asList(new String[] {"org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath288", }));
				triggerTests.put("Math83", Arrays.asList(new String[] {"org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath286", }));
				triggerTests.put("Math84", Arrays.asList(new String[] {"org.apache.commons.math.optimization.direct.MultiDirectionalTest::testMinimizeMaximize", "org.apache.commons.math.optimization.direct.MultiDirectionalTest::testMath283", }));
				triggerTests.put("Math85", Arrays.asList(new String[] {"org.apache.commons.math.distribution.NormalDistributionTest::testMath280", }));
				triggerTests.put("Math86", Arrays.asList(new String[] {"org.apache.commons.math.linear.CholeskyDecompositionImplTest::testMath274", "org.apache.commons.math.linear.CholeskyDecompositionImplTest::testNotPositiveDefinite", }));
				triggerTests.put("Math87", Arrays.asList(new String[] {"org.apache.commons.math.optimization.linear.SimplexSolverTest::testSingleVariableAndConstraint", }));
				triggerTests.put("Math88", Arrays.asList(new String[] {"org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath272", }));
				triggerTests.put("Math89", Arrays.asList(new String[] {"org.apache.commons.math.stat.FrequencyTest::testAddNonComparable", }));
				triggerTests.put("Math90", Arrays.asList(new String[] {"org.apache.commons.math.stat.FrequencyTest::testAddNonComparable", }));
				triggerTests.put("Math91", Arrays.asList(new String[] {"org.apache.commons.math.fraction.FractionTest::testCompareTo", }));
				triggerTests.put("Math92", Arrays.asList(new String[] {"org.apache.commons.math.util.MathUtilsTest::testBinomialCoefficientLarge", }));
				triggerTests.put("Math93", Arrays.asList(new String[] {"org.apache.commons.math.util.MathUtilsTest::testFactorial", }));
				triggerTests.put("Math94", Arrays.asList(new String[] {"org.apache.commons.math.util.MathUtilsTest::testGcd", }));
				triggerTests.put("Math95", Arrays.asList(new String[] {"org.apache.commons.math.distribution.FDistributionTest::testSmallDegreesOfFreedom", }));
				triggerTests.put("Math96", Arrays.asList(new String[] {"org.apache.commons.math.complex.ComplexTest::testMath221", }));
				triggerTests.put("Math97", Arrays.asList(new String[] {"org.apache.commons.math.analysis.BrentSolverTest::testRootEndpoints", }));
				triggerTests.put("Math98", Arrays.asList(new String[] {"org.apache.commons.math.linear.BigMatrixImplTest::testMath209", "org.apache.commons.math.linear.RealMatrixImplTest::testMath209", }));
				triggerTests.put("Math99", Arrays.asList(new String[] {"org.apache.commons.math.util.MathUtilsTest::testGcd", "org.apache.commons.math.util.MathUtilsTest::testLcm", }));
				triggerTests.put("Math100", Arrays.asList(new String[] {"org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters", }));
				triggerTests.put("Math101", Arrays.asList(new String[] {"org.apache.commons.math.complex.ComplexFormatTest::testForgottenImaginaryCharacter", "org.apache.commons.math.complex.FrenchComplexFormatTest::testForgottenImaginaryCharacter", }));
				triggerTests.put("Math102", Arrays.asList(new String[] {"org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic", "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare", "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic", "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare", "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic", "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare", }));
				triggerTests.put("Math103", Arrays.asList(new String[] {"org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues", }));
				triggerTests.put("Math104", Arrays.asList(new String[] {"org.apache.commons.math.special.GammaTest::testRegularizedGammaPositivePositive", }));
				triggerTests.put("Math105", Arrays.asList(new String[] {"org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative", }));
				triggerTests.put("Math106", Arrays.asList(new String[] {"org.apache.commons.math.fraction.FractionFormatTest::testParseProperInvalidMinus", }));
				triggerTests.put("Time1", Arrays.asList(new String[] {"org.joda.time.TestPartial_Constructors::testConstructorEx7_TypeArray_intArray", }));
				triggerTests.put("Time2", Arrays.asList(new String[] {"org.joda.time.TestPartial_Basics::testWith_baseAndArgHaveNoRange", }));
				triggerTests.put("Time3", Arrays.asList(new String[] {"org.joda.time.TestMutableDateTime_Adds::testAddYears_int_dstOverlapWinter_addZero", "org.joda.time.TestMutableDateTime_Adds::testAddDays_int_dstOverlapWinter_addZero", "org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int_dstOverlapWinter_addZero", "org.joda.time.TestMutableDateTime_Adds::testAdd_DurationFieldType_int_dstOverlapWinter_addZero", "org.joda.time.TestMutableDateTime_Adds::testAddMonths_int_dstOverlapWinter_addZero", }));
				triggerTests.put("Time4", Arrays.asList(new String[] {"org.joda.time.TestPartial_Basics::testWith3", }));
				triggerTests.put("Time5", Arrays.asList(new String[] {"org.joda.time.TestPeriod_Basics::testNormalizedStandard_periodType_months1", "org.joda.time.TestPeriod_Basics::testNormalizedStandard_periodType_months2", "org.joda.time.TestPeriod_Basics::testNormalizedStandard_periodType_monthsWeeks", }));
				triggerTests.put("Time6", Arrays.asList(new String[] {"org.joda.time.chrono.TestGJDate::test_cutoverPreZero", "org.joda.time.chrono.TestGJDate::test_plusWeekyears_positiveToNegative_crossCutover", "org.joda.time.chrono.TestGJDate::test_plusYears_positiveToZero_crossCutover", "org.joda.time.chrono.TestGJDate::test_plusYears_positiveToNegative_crossCutover", "org.joda.time.chrono.TestGJDate::test_plusWeekyears_positiveToZero_crossCutover", }));
				triggerTests.put("Time7", Arrays.asList(new String[] {"org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear", "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear", }));
				triggerTests.put("Time8", Arrays.asList(new String[] {"org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int", }));
				triggerTests.put("Time9", Arrays.asList(new String[] {"org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int", }));
				triggerTests.put("Time10", Arrays.asList(new String[] {"org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay", "org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay", }));
				triggerTests.put("Time11", Arrays.asList(new String[] {"org.joda.time.tz.TestCompiler::testDateTimeZoneBuilder", }));
				triggerTests.put("Time12", Arrays.asList(new String[] {"org.joda.time.TestLocalDateTime_Constructors::testFactory_fromDateFields_beforeYearZero1", "org.joda.time.TestLocalDateTime_Constructors::testFactory_fromDateFields_beforeYearZero3", "org.joda.time.TestLocalDateTime_Constructors::testFactory_fromCalendarFields_beforeYearZero1", "org.joda.time.TestLocalDateTime_Constructors::testFactory_fromCalendarFields_beforeYearZero3", "org.joda.time.TestLocalDate_Constructors::testFactory_fromDateFields_beforeYearZero1", "org.joda.time.TestLocalDate_Constructors::testFactory_fromDateFields_beforeYearZero3", "org.joda.time.TestLocalDate_Constructors::testFactory_fromCalendarFields_beforeYearZero1", "org.joda.time.TestLocalDate_Constructors::testFactory_fromCalendarFields_beforeYearZero3", }));
				triggerTests.put("Time13", Arrays.asList(new String[] {"org.joda.time.format.TestISOPeriodFormat::testFormatStandard_negative", }));
				triggerTests.put("Time14", Arrays.asList(new String[] {"org.joda.time.TestMonthDay_Basics::testPlusMonths_int_negativeFromLeap", "org.joda.time.TestMonthDay_Basics::testMinusDays_int_negativeFromLeap", "org.joda.time.TestMonthDay_Basics::testPlusMonths_int_fromLeap", "org.joda.time.TestMonthDay_Basics::testPlusMonths_int_negativeEndOfMonthAdjust", "org.joda.time.TestMonthDay_Basics::testMinusMonths_int_endOfMonthAdjust", "org.joda.time.TestMonthDay_Basics::testMinusMonths_int_negativeFromLeap", "org.joda.time.TestMonthDay_Basics::testMinusMonths_int_fromLeap", "org.joda.time.TestMonthDay_Basics::testPlusDays_int_fromLeap", }));
				triggerTests.put("Time15", Arrays.asList(new String[] {"org.joda.time.field.TestFieldUtils::testSafeMultiplyLongInt", }));
				triggerTests.put("Time16", Arrays.asList(new String[] {"org.joda.time.format.TestDateTimeFormatter::testParseInto_monthOnly_baseStartYear", "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthOnly_parseStartYear", "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthOnly_baseEndYear", "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthOnly", "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_withDefaultYear_feb29", "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29", "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthOnly_parseEndYear", }));
				triggerTests.put("Time17", Arrays.asList(new String[] {"org.joda.time.TestDateTimeZoneCutover::testBug3476684_adjustOffset", }));
				triggerTests.put("Time18", Arrays.asList(new String[] {"org.joda.time.chrono.TestGJChronology::testLeapYearRulesConstruction", }));
				triggerTests.put("Time19", Arrays.asList(new String[] {"org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london", }));
				triggerTests.put("Time20", Arrays.asList(new String[] {"org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneDawsonCreek", }));
				triggerTests.put("Time21", Arrays.asList(new String[] {"org.joda.time.TestDateTimeZone::testGetName_berlin", "org.joda.time.TestDateTimeZone::testGetShortName_berlin", }));
				triggerTests.put("Time22", Arrays.asList(new String[] {"org.joda.time.TestDuration_Basics::testToPeriod_fixedZone", "org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone", }));
				triggerTests.put("Time23", Arrays.asList(new String[] {"org.joda.time.TestDateTimeZone::testForID_String_old", }));
				triggerTests.put("Time24", Arrays.asList(new String[] {"org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_weekyear_month_week_2010", "org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_weekyear_month_week_2011", "org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_weekyear_month_week_2012", "org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2010", "org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2011", "org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2012", "org.joda.time.format.TestDateTimeFormatter::testParseLocalDate_year_month_week_2016", }));
				triggerTests.put("Time25", Arrays.asList(new String[] {"org.joda.time.TestDateTimeZoneCutover::test_DateTime_constructor_Moscow_Autumn", "org.joda.time.TestDateTimeZoneCutover::test_getOffsetFromLocal_Moscow_Autumn_overlap_mins", "org.joda.time.TestDateTimeZoneCutover::test_getOffsetFromLocal_Moscow_Autumn", }));
				triggerTests.put("Time26", Arrays.asList(new String[] {"org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange", "org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange", "org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone", "org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral", "org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer", "org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange", "org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter", "org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW", }));
				triggerTests.put("Time27", Arrays.asList(new String[] {"org.joda.time.format.TestPeriodFormatterBuilder::testBug2495455", }));
				triggerTests.put("Lang1", Arrays.asList(new String[] {"org.apache.commons.lang3.math.NumberUtilsTest::TestLang747", }));
				triggerTests.put("Lang2", Arrays.asList(new String[] {"org.apache.commons.lang3.LocaleUtilsTest::testParseAllLocales", }));
				triggerTests.put("Lang3", Arrays.asList(new String[] {"org.apache.commons.lang3.math.NumberUtilsTest::testStringCreateNumberEnsureNoPrecisionLoss", }));
				triggerTests.put("Lang4", Arrays.asList(new String[] {"org.apache.commons.lang3.text.translate.LookupTranslatorTest::testLang882", }));
				triggerTests.put("Lang5", Arrays.asList(new String[] {"org.apache.commons.lang3.LocaleUtilsTest::testLang865", }));
				triggerTests.put("Lang6", Arrays.asList(new String[] {"org.apache.commons.lang3.StringUtilsTest::testEscapeSurrogatePairs", }));
				triggerTests.put("Lang7", Arrays.asList(new String[] {"org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber", }));
				triggerTests.put("Lang8", Arrays.asList(new String[] {"org.apache.commons.lang3.time.FastDateFormat_PrinterTest::testCalendarTimezoneRespected", "org.apache.commons.lang3.time.FastDatePrinterTest::testCalendarTimezoneRespected", }));
				triggerTests.put("Lang9", Arrays.asList(new String[] {"org.apache.commons.lang3.time.FastDateFormat_ParserTest::testLANG_832", "org.apache.commons.lang3.time.FastDateParserTest::testLANG_832", }));
				triggerTests.put("Lang10", Arrays.asList(new String[] {"org.apache.commons.lang3.time.FastDateFormat_ParserTest::testLANG_831", "org.apache.commons.lang3.time.FastDateParserTest::testLANG_831", }));
				triggerTests.put("Lang11", Arrays.asList(new String[] {"org.apache.commons.lang3.RandomStringUtilsTest::testLANG807", }));
				triggerTests.put("Lang12", Arrays.asList(new String[] {"org.apache.commons.lang3.RandomStringUtilsTest::testExceptions", "org.apache.commons.lang3.RandomStringUtilsTest::testLANG805", }));
				triggerTests.put("Lang13", Arrays.asList(new String[] {"org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerialization", }));
				triggerTests.put("Lang14", Arrays.asList(new String[] {"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals", }));
				triggerTests.put("Lang15", Arrays.asList(new String[] {"org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments", "org.apache.commons.lang3.reflect.TypeUtilsTest::testIsAssignable", }));
				triggerTests.put("Lang16", Arrays.asList(new String[] {"org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber", }));
				triggerTests.put("Lang17", Arrays.asList(new String[] {"org.apache.commons.lang3.StringEscapeUtilsTest::testLang720", }));
				triggerTests.put("Lang18", Arrays.asList(new String[] {"org.apache.commons.lang3.time.FastDateFormatTest::testFormat", }));
				triggerTests.put("Lang19", Arrays.asList(new String[] {"org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity", "org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds", }));
				triggerTests.put("Lang20", Arrays.asList(new String[] {"org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayChar", "org.apache.commons.lang3.StringUtilsTest::testJoin_Objectarray", }));
				triggerTests.put("Lang21", Arrays.asList(new String[] {"org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTime_Cal", }));
				triggerTests.put("Lang22", Arrays.asList(new String[] {"org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int", "org.apache.commons.lang3.math.FractionTest::testReduce", }));
				triggerTests.put("Lang23", Arrays.asList(new String[] {"org.apache.commons.lang3.text.ExtendedMessageFormatTest::testEqualsHashcode", }));
				triggerTests.put("Lang24", Arrays.asList(new String[] {"org.apache.commons.lang3.math.NumberUtilsTest::testIsNumber", }));
				triggerTests.put("Lang25", Arrays.asList(new String[] {"org.apache.commons.lang3.text.translate.EntityArraysTest::testISO8859_1_ESCAPE", }));
				triggerTests.put("Lang26", Arrays.asList(new String[] {"org.apache.commons.lang3.time.FastDateFormatTest::testLang645", }));
				triggerTests.put("Lang27", Arrays.asList(new String[] {"org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber", }));
				triggerTests.put("Lang28", Arrays.asList(new String[] {"org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testSupplementaryUnescaping", }));
				triggerTests.put("Lang29", Arrays.asList(new String[] {"org.apache.commons.lang3.SystemUtilsTest::testJavaVersionAsInt", }));
				triggerTests.put("Lang30", Arrays.asList(new String[] {"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithSupplementaryChars", "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithSupplementaryChars", "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringCharArrayWithBadSupplementaryChars", "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringStringWithSupplementaryChars", "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringWithBadSupplementaryChars", "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringCharArrayWithSupplementaryChars", "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringCharArrayWithSupplementaryChars", "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithBadSupplementaryChars", "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringStringWithSupplementaryChars", "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithBadSupplementaryChars", }));
				triggerTests.put("Lang31", Arrays.asList(new String[] {"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars", "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars", }));
				triggerTests.put("Lang32", Arrays.asList(new String[] {"org.apache.commons.lang3.builder.HashCodeBuilderTest::testReflectionObjectCycle", }));
				triggerTests.put("Lang33", Arrays.asList(new String[] {"org.apache.commons.lang3.ClassUtilsTest::testToClass_object", }));
				triggerTests.put("Lang34", Arrays.asList(new String[] {"org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectCycle", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchy", "org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceTwoVarsReflectionObjectCycle", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycle", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArrayArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionyteArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArrayArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionhortArrayArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectCycle", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArrayArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionByteArrayArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycleLevel2", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayAndObjectCycle", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArrayArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionShortArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceVarReflectionObjectCycle", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArray", "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArrayArray", }));
				triggerTests.put("Lang35", Arrays.asList(new String[] {"org.apache.commons.lang3.ArrayUtilsAddTest::testLANG571", }));
				triggerTests.put("Lang36", Arrays.asList(new String[] {"org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber", "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumber", }));
				triggerTests.put("Lang37", Arrays.asList(new String[] {"org.apache.commons.lang3.ArrayUtilsAddTest::testJira567", }));
				triggerTests.put("Lang38", Arrays.asList(new String[] {"org.apache.commons.lang3.time.FastDateFormatTest::testLang538", }));
				triggerTests.put("Lang39", Arrays.asList(new String[] {"org.apache.commons.lang3.StringUtilsTest::testReplace_StringStringArrayStringArray", }));
				triggerTests.put("Lang40", Arrays.asList(new String[] {"org.apache.commons.lang.StringUtilsEqualsIndexOfTest::testContainsIgnoreCase_LocaleIndependence", }));
				triggerTests.put("Lang41", Arrays.asList(new String[] {"org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class", "org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class", }));
				triggerTests.put("Lang42", Arrays.asList(new String[] {"org.apache.commons.lang.StringEscapeUtilsTest::testEscapeHtmlHighUnicode", }));
				triggerTests.put("Lang43", Arrays.asList(new String[] {"org.apache.commons.lang.text.ExtendedMessageFormatTest::testEscapedQuote_LANG_477", }));
				triggerTests.put("Lang44", Arrays.asList(new String[] {"org.apache.commons.lang.NumberUtilsTest::testLang457", }));
				triggerTests.put("Lang45", Arrays.asList(new String[] {"org.apache.commons.lang.WordUtilsTest::testAbbreviate", }));
				triggerTests.put("Lang46", Arrays.asList(new String[] {"org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaWithSlash", }));
				triggerTests.put("Lang47", Arrays.asList(new String[] {"org.apache.commons.lang.text.StrBuilderTest::testLang412Left", "org.apache.commons.lang.text.StrBuilderTest::testLang412Right", }));
				triggerTests.put("Lang48", Arrays.asList(new String[] {"org.apache.commons.lang.builder.EqualsBuilderTest::testBigDecimal", }));
				triggerTests.put("Lang49", Arrays.asList(new String[] {"org.apache.commons.lang.math.FractionTest::testReduce", }));
				triggerTests.put("Lang50", Arrays.asList(new String[] {"org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance", "org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateTimeInstance", }));
				triggerTests.put("Lang51", Arrays.asList(new String[] {"org.apache.commons.lang.BooleanUtilsTest::test_toBoolean_String", }));
				triggerTests.put("Lang52", Arrays.asList(new String[] {"org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaScript", }));
				triggerTests.put("Lang53", Arrays.asList(new String[] {"org.apache.commons.lang.time.DateUtilsTest::testRoundLang346", }));
				triggerTests.put("Lang54", Arrays.asList(new String[] {"org.apache.commons.lang.LocaleUtilsTest::testLang328", }));
				triggerTests.put("Lang55", Arrays.asList(new String[] {"org.apache.commons.lang.time.StopWatchTest::testLang315", }));
				triggerTests.put("Lang56", Arrays.asList(new String[] {"org.apache.commons.lang.time.FastDateFormatTest::testLang303", }));
				triggerTests.put("Lang57", Arrays.asList(new String[] {"org.apache.commons.lang.LocaleUtilsTest::testAvailableLocaleSet", "org.apache.commons.lang.LocaleUtilsTest::testIsAvailableLocale", "org.apache.commons.lang.LocaleUtilsTest::testAvailableLocaleList", "org.apache.commons.lang.LocaleUtilsTest::testCountriesByLanguage", "org.apache.commons.lang.LocaleUtilsTest::testLocaleLookupList_LocaleLocale", "org.apache.commons.lang.LocaleUtilsTest::testLanguagesByCountry", "org.apache.commons.lang.LocaleUtilsTest::testToLocale_1Part", "org.apache.commons.lang.LocaleUtilsTest::testToLocale_2Part", "org.apache.commons.lang.LocaleUtilsTest::testToLocale_3Part", "org.apache.commons.lang.LocaleUtilsTest::testLocaleLookupList_Locale", "org.apache.commons.lang.LocaleUtilsTest::testConstructor", }));
				triggerTests.put("Lang58", Arrays.asList(new String[] {"org.apache.commons.lang.math.NumberUtilsTest::testLang300", }));
				triggerTests.put("Lang59", Arrays.asList(new String[] {"org.apache.commons.lang.text.StrBuilderAppendInsertTest::testLang299", }));
				triggerTests.put("Lang60", Arrays.asList(new String[] {"org.apache.commons.lang.text.StrBuilderTest::testLang295", }));
				triggerTests.put("Lang61", Arrays.asList(new String[] {"org.apache.commons.lang.text.StrBuilderTest::testIndexOfLang294", "org.apache.commons.lang.text.StrBuilderTest::testLang294", }));
				triggerTests.put("Lang62", Arrays.asList(new String[] {"org.apache.commons.lang.EntitiesTest::testNumberOverflow", }));
				triggerTests.put("Lang63", Arrays.asList(new String[] {"org.apache.commons.lang.time.DurationFormatUtilsTest::testJiraLang281", }));
				triggerTests.put("Lang64", Arrays.asList(new String[] {"org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType", }));
				triggerTests.put("Lang65", Arrays.asList(new String[] {"org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59", }));
				triggerTests.put("Mockito1", Arrays.asList(new String[] {"org.mockito.internal.invocation.InvocationMatcherTest::should_capture_arguments_when_args_count_does_NOT_match", "org.mockito.internal.util.reflection.FieldInitializerTest::can_instantiate_class_with_parameterized_constructor", "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest::should_report_failure_if_constructor_throws_exception", "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest::should_fail_if_an_argument_instance_type_do_not_match_wanted_type", "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest::should_instantiate_type_with_vararg_constructor", "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest::should_instantiate_type_if_resolver_provide_matching_types", "org.mockitousage.basicapi.ResetTest::shouldRemoveAllStubbing", "org.mockitousage.basicapi.UsingVarargsTest::shouldVerifyWithNullVarArgArray", "org.mockitousage.basicapi.UsingVarargsTest::shouldVerifyWithAnyObject", "org.mockitousage.basicapi.UsingVarargsTest::shouldStubBooleanVarargs", "org.mockitousage.basicapi.UsingVarargsTest::shouldMatchEasilyEmptyVararg", "org.mockitousage.basicapi.UsingVarargsTest::shouldVerifyBooleanVarargs", "org.mockitousage.basicapi.UsingVarargsTest::shouldStubCorrectlyWhenMixedVarargsUsed", "org.mockitousage.basicapi.UsingVarargsTest::shouldStubStringVarargs", "org.mockitousage.basicapi.UsingVarargsTest::shouldStubCorrectlyWhenDoubleStringAndMixedVarargsUsed", "org.mockitousage.basicapi.UsingVarargsTest::shouldVerifyStringVarargs", "org.mockitousage.basicapi.UsingVarargsTest::shouldVerifyObjectVarargs", "org.mockitousage.bugs.VarargsErrorWhenCallingRealMethodTest::shouldNotThrowAnyException", "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest::shouldVerifyCorrectlyWithAnyVarargs", "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest::shouldVerifyCorrectlyNumberOfInvocationsUsingAnyVarargAndEqualArgument", "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest::shouldStubUsingAnyVarargs", "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest::shouldVerifyUsingMatchers", "org.mockitousage.stubbing.BasicStubbingTest::test_stub_only_not_verifiable", "org.mockitousage.stubbing.BasicStubbingTest::should_evaluate_latest_stubbing_first", "org.mockitousage.stubbing.DeprecatedStubbingTest::shouldEvaluateLatestStubbingFirst", "org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest::shouldUseEqualsToVerifyMethodVarargs", }));
				triggerTests.put("Mockito2", Arrays.asList(new String[] {"org.mockito.internal.util.TimerTest::should_throw_friendly_reminder_exception_when_duration_is_negative", "org.mockito.verification.NegativeDurationTest::should_throw_exception_when_duration_is_negative_for_timeout_method", "org.mockito.verification.NegativeDurationTest::should_throw_exception_when_duration_is_negative_for_after_method", }));
				triggerTests.put("Mockito3", Arrays.asList(new String[] {"org.mockito.internal.invocation.InvocationMatcherTest::should_capture_varargs_as_vararg", "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest::shouldVerifyCorrectlyNumberOfInvocationsWithVarargs", "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest::shouldMatchAnyVararg", "org.mockitousage.matchers.CapturingArgumentsTest::should_capture_all_vararg", "org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times", "org.mockitousage.matchers.CapturingArgumentsTest::should_capture_vararg", "org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_on_pure_vararg_method", "org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper", "org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive", }));
				triggerTests.put("Mockito4", Arrays.asList(new String[] {"org.mockito.exceptions.ReporterTest::can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order", "org.mockito.exceptions.ReporterTest::can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure", "org.mockito.exceptions.ReporterTest::can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted", "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest::should_not_throw_a_ClassCastException", }));
				triggerTests.put("Mockito5", Arrays.asList(new String[] {"org.mockitointegration.NoJUnitDependenciesTest::pure_mockito_should_not_depend_JUnit", }));
				triggerTests.put("Mockito6", Arrays.asList(new String[] {"org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers", "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAnyXMatchers", "org.mockitousage.matchers.MatchersTest::anyStringMatcher", "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyCollection", "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyList", "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyMap", "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnySet", }));
				triggerTests.put("Mockito7", Arrays.asList(new String[] {"org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenricNestedAsRawTypeTest::discoverDeepMockingOfGenerics", }));
				triggerTests.put("Mockito8", Arrays.asList(new String[] {"org.mockito.internal.util.reflection.GenericMetadataSupportTest::typeVariable_of_self_type", }));
				triggerTests.put("Mockito9", Arrays.asList(new String[] {"org.mockitousage.constructor.CreatingMocksWithConstructorTest::abstractMethodStubbed", "org.mockitousage.constructor.CreatingMocksWithConstructorTest::testCallsRealInterfaceMethod", "org.mockitousage.constructor.CreatingMocksWithConstructorTest::abstractMethodReturnsDefault", }));
				triggerTests.put("Mockito10", Arrays.asList(new String[] {"org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest::should_not_raise_a_mockito_exception_about_serialization_when_accessing_deep_stub", }));
				triggerTests.put("Mockito11", Arrays.asList(new String[] {"org.mockito.internal.creation.DelegatingMethodTest::equals_should_return_true_when_equal", "org.mockito.internal.creation.DelegatingMethodTest::equals_should_return_true_when_self", }));
				triggerTests.put("Mockito12", Arrays.asList(new String[] {"org.mockito.internal.util.reflection.GenericMasterTest::shouldDealWithNestedGenerics", "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseAnnotatedCaptor", "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseCaptorInOrdinaryWay", "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldCaptureGenericList", "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseGenericlessAnnotatedCaptor", "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenWrongTypeForCaptor", "org.mockitousage.annotation.CaptorAnnotationTest::testNormalUsage", "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenMoreThanOneMockitoAnnotaton", "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenInitializingCaptorsForNullClass", "org.mockitousage.annotation.CaptorAnnotationTest::shouldLookForAnnotatedCaptorsInSuperClasses", }));
				triggerTests.put("Mockito13", Arrays.asList(new String[] {"org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest::shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine", }));
				triggerTests.put("Mockito14", Arrays.asList(new String[] {"org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest::shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine", }));
				triggerTests.put("Mockito15", Arrays.asList(new String[] {"org.mockitousage.bugs.InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest::shouldInjectUsingPropertySetterIfAvailable", }));
				triggerTests.put("Mockito16", Arrays.asList(new String[] {"org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest::shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS", }));
				triggerTests.put("Mockito17", Arrays.asList(new String[] {"org.mockitousage.basicapi.MocksSerializationTest::shouldBeSerializeAndHaveExtraInterfaces", }));
				triggerTests.put("Mockito18", Arrays.asList(new String[] {"org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest::should_return_empty_iterable", }));
				triggerTests.put("Mockito19", Arrays.asList(new String[] {"org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest::shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable", }));
				triggerTests.put("Mockito20", Arrays.asList(new String[] {"org.mockitousage.annotation.SpyAnnotationTest::should_spy_inner_class", "org.mockitousage.annotation.SpyAnnotationTest::should_report_when_constructor_is_explosive", "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_spy_abstract_classes", "org.mockitousage.constructor.CreatingMocksWithConstructorTest::exception_message_when_constructor_not_found", "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_create_mock_with_constructor", "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_mock_inner_classes", "org.mockitousage.constructor.CreatingMocksWithConstructorTest::mocking_inner_classes_with_wrong_outer_instance", "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_mock_abstract_classes", }));
				triggerTests.put("Mockito21", Arrays.asList(new String[] {"org.mockito.internal.creation.instance.ConstructorInstantiatorTest::creates_instances_of_inner_classes", }));
				triggerTests.put("Mockito22", Arrays.asList(new String[] {"org.mockito.internal.matchers.EqualityTest::shouldKnowIfObjectsAreEqual", }));
				triggerTests.put("Mockito23", Arrays.asList(new String[] {"org.mockitousage.stubbing.DeepStubsSerializableTest::should_serialize_and_deserialize_mock_created_by_deep_stubs", }));
				triggerTests.put("Mockito24", Arrays.asList(new String[] {"org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest::should_return_zero_if_mock_is_compared_to_itself", "org.mockitousage.bugs.ShouldMocksCompareToBeConsistentWithEqualsTest::should_compare_to_be_consistent_with_equals_when_comparing_the_same_reference", }));
				triggerTests.put("Mockito25", Arrays.asList(new String[] {"org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::will_return_default_value_on_non_mockable_nested_generic", "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class", "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::can_create_mock_from_return_types_declared_with_a_bounded_wildcard", "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_parameterizedtype_that_is_referencing_a_typevar_on_class", "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::generic_deep_mock_frenzy__look_at_these_chained_calls", "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class", }));
				triggerTests.put("Mockito26", Arrays.asList(new String[] {"org.mockito.internal.progress.HandyReturnValuesTest::should_default_values_for_primitive", "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest::should_return_primitive", "org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest::should_return_the_usual_default_values_for_primitives", "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest::should_return_the_usual_default_values_for_primitives", }));
				triggerTests.put("Mockito27", Arrays.asList(new String[] {"org.mockitousage.bugs.ListenersLostOnResetMockTest::listener", }));
				triggerTests.put("Mockito28", Arrays.asList(new String[] {"org.mockitousage.bugs.InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest::mock_should_be_injected_once_and_in_the_best_matching_type", }));
				triggerTests.put("Mockito29", Arrays.asList(new String[] {"org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenNullPassedToSame", }));
				triggerTests.put("Mockito30", Arrays.asList(new String[] {"org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest::shouldPrintTheParametersOnSmartNullPointerExceptionMessage", }));
				triggerTests.put("Mockito31", Arrays.asList(new String[] {"org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest::shouldPrintTheParametersWhenCallingAMethodWithArgs", }));
				triggerTests.put("Mockito32", Arrays.asList(new String[] {"org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName", }));
				triggerTests.put("Mockito33", Arrays.asList(new String[] {"org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest::shouldStubbingWork", "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest::shouldVerificationWorks", }));
				triggerTests.put("Mockito34", Arrays.asList(new String[] {"org.mockito.internal.invocation.InvocationMatcherTest::shouldMatchCaptureArgumentsWhenArgsCountDoesNOTMatch", "org.mockitousage.basicapi.UsingVarargsTest::shouldMatchEasilyEmptyVararg", }));
				triggerTests.put("Mockito35", Arrays.asList(new String[] {"org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenIntPassed", "org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenIntegerPassed", "org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenIntegerPassedToEq", "org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenIntegerPassedToSame", }));
				triggerTests.put("Mockito36", Arrays.asList(new String[] {"org.mockito.internal.invocation.InvocationTest::shouldScreamWhenCallingRealMethodOnInterface", "org.mockitousage.spies.SpyingOnInterfacesTest::shouldFailInRuntimeWhenCallingRealMethodOnInterface", }));
				triggerTests.put("Mockito37", Arrays.asList(new String[] {"org.mockito.internal.stubbing.answers.AnswersValidatorTest::shouldFailWhenCallingRealMethodOnIterface", "org.mockitousage.spies.SpyingOnInterfacesTest::shouldFailFastWhenCallingRealMethodOnInterface", }));
				triggerTests.put("Mockito38", Arrays.asList(new String[] {"org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest::shouldWorkFineWhenGivenArgIsNull", "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest::shouldAllowPassingNullArgument", }));
	}
}
